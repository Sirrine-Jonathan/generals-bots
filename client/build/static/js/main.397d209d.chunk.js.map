{"version":3,"sources":["components/Mosiac.js","components/PageHeader.js","components/PageContainer.js","components/Loading.js","components/BotCard.js","pages/HomePage.js","App.js","reportWebVitals.js","index.js"],"names":["Mosaic","children","StyledMosaic","styled","div","PageHeader","props","StyledPageHeader","PageContainer","StyledPageContainer","Loading","BotCard","bot","useState","gameID","setGameID","Card","Content","Header","style","display","username","Image","src","width","Meta","Date","last_updated","toLocaleString","Divider","Row","StyledButton","primary","fluid","onClick","dir","fetch","then","res","json","data","window","open","url","Icon","name","console","log","StyledInput","type","value","placeholder","onChange","e","target","Button","secondary","toast","StyledLink","href","rel","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","Input","a","HomePage","listLoading","setListLoading","list","setList","useEffect","catch","error","color","size","Container","undefined","length","map","idx","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.397d209d.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nconst Mosaic = ({children}) => {\r\n  return (\r\n    <StyledMosaic>\r\n      {children}\r\n    </StyledMosaic>\r\n  )\r\n}\r\n\r\nexport default Mosaic;\r\n\r\nconst StyledMosaic = styled.div`\r\n  padding-top: 30px;\r\n`;","import styled from 'styled-components';\r\n\r\nconst PageHeader = ({children, ...props}) => {\r\n  return (\r\n    <StyledPageHeader {...props}>\r\n      {children}\r\n    </StyledPageHeader>\r\n  )\r\n}\r\n\r\nexport default PageHeader;\r\n\r\nconst StyledPageHeader = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  background: #2a2a3a;\r\n  padding: 20px;\r\n  & h1 {\r\n    color: white;\r\n    padding: 0;\r\n    margin: 0;\r\n  }\r\n`;","import styled from 'styled-components'\r\n\r\nconst PageContainer = ({children}) => {\r\n  return (\r\n    <StyledPageContainer>\r\n      {children}\r\n    </StyledPageContainer>\r\n  )\r\n}\r\n\r\nexport default PageContainer;\r\n\r\nconst StyledPageContainer = styled.div`\r\n\r\n`;","const Loading = () => <div>...Loading</div>\r\nexport default Loading;","import { useState } from 'react'\r\nimport { Card, Input, Button, Icon, Divider, Image } from 'semantic-ui-react';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport styled from 'styled-components';\r\nconst BotCard = ({bot}) => {\r\n  const [gameID, setGameID] = useState(\"\");\r\n  const quickPlay = (dir) => {\r\n    fetch(`/quickplay/${dir}`)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        window.open(data.url, '_blank');\r\n      });\r\n  }\r\n  const versus = (dir) => {\r\n    fetch(`/versus`)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        console.log(data);\r\n      });\r\n  }\r\n  const invite = (dir) => {\r\n    fetch(`/invite/${dir}/${gameID}`)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        toast(<StyledLink href={`${data.url}`} target=\"_blank\" rel=\"noreferrer\">Go to game!</StyledLink>);\r\n      })\r\n  }\r\n  return (\r\n    <Card key={bot.username}>\r\n      <Card.Content>\r\n        <Card.Header style={{display: 'flex', 'justify-content': 'space-between'}}>\r\n          {bot.username}\r\n          <Image src=\"/robot.png\" style={{width: \"33px\", 'margin-top': \"-8px\"}} />\r\n        </Card.Header>\r\n        <Card.Meta>Updated {( new Date(bot.last_updated)).toLocaleString()}</Card.Meta>\r\n        <Divider />\r\n        <Row>\r\n          <StyledButton primary fluid onClick={() => quickPlay(bot.dir)}>\r\n            <Icon name=\"game\" />\r\n            <div>Quick Play</div>\r\n          </StyledButton>\r\n        </Row>\r\n        <Row>\r\n          <StyledButton primary fluid onClick={() => versus(bot.dir)}>\r\n            <Icon name=\"game\" />\r\n            <div>1v1</div>\r\n          </StyledButton>\r\n        </Row>\r\n        <Row>\r\n          <StyledInput type=\"text\" value={gameID} placeholder=\"Game ID\" onChange={(e) => {setGameID(e.target.value)}}/>\r\n          <Button secondary onClick={() => invite(bot.dir)}>Invite</Button>\r\n        </Row>\r\n      </Card.Content>\r\n      <ToastContainer\r\n        position=\"top-right\"\r\n        autoClose={5000}\r\n        hideProgressBar\r\n        newestOnTop={false}\r\n        closeOnClick={false}\r\n        rtl={false}\r\n        pauseOnFocusLoss\r\n        draggable\r\n        pauseOnHover\r\n      />\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default BotCard;\r\n\r\nconst Row = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  padding-top: 5px;\r\n  box-sizing: border-box;\r\n  flex: 1;\r\n  width: 100%;\r\n`;\r\n\r\nconst StyledInput = styled(Input)`\r\n  margin-right: 4px;\r\n`;\r\n\r\nconst StyledButton = styled(Button)`\r\n  display: flex !important;\r\n  flex-wrap: no-wrap !important;\r\n  flex-direction: row !important;\r\n  justify-content: center;\r\n  align-items: center;\r\n  & div {\r\n    padding-left: 5px;\r\n  }\r\n`;\r\n\r\nconst StyledLink = styled.a`\r\n  text-decoration: none;\r\n  font-size: 16px;\r\n  color: #000;\r\n  &:hover {\r\n    color: #333;\r\n    text-decoration: underline;\r\n  }\r\n`","import { useEffect, useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Container, Icon, } from 'semantic-ui-react';\r\nimport Mosaic from '../components/Mosiac';\r\nimport PageHeader from '../components/PageHeader';\r\nimport PageContainer from '../components/PageContainer';\r\nimport Loading from '../components/Loading';\r\nimport BotCard from '../components/BotCard';\r\nconst HomePage = () => {\r\n  const [listLoading, setListLoading] = useState(true);\r\n  const [list, setList] = useState(null);\r\n  const getBotCards = () => {\r\n    if (!list || list.length === undefined) return null;\r\n    return list.map((bot, idx) => (\r\n        <BotCard bot={bot} />\r\n      )\r\n    );\r\n  }\r\n  useEffect(() => {\r\n    fetch(\"/init\")\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        setList(data);\r\n        setListLoading(false);\r\n      })\r\n      .catch(error => {\r\n        setListLoading(false)\r\n      })\r\n  }, []);\r\n  return (\r\n    <PageContainer>\r\n      <PageHeader>\r\n          <Row>\r\n            <h1>Generals Bots</h1>\r\n          </Row>\r\n          <a href=\"https://github.com/Sirrine-Jonathan/generals-bots.git\" target=\"_blank\" rel=\"noreferrer\">\r\n            <Icon name=\"github\" style={{color: \"#fff\"}} size=\"huge\" />\r\n          </a>\r\n      </PageHeader>\r\n      <Container>\r\n        {(listLoading) ? <Loading />:(\r\n          <Mosaic>\r\n            {getBotCards()}\r\n          </Mosaic>\r\n        )}\r\n      </Container>\r\n    </PageContainer>\r\n  )\r\n}\r\nexport default HomePage;\r\n\r\nconst Row = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`;","import HomePage from './pages/HomePage'\r\nconst App = () => <HomePage />\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}